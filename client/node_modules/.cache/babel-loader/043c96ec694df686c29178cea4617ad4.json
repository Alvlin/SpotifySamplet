{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alvin\\\\Desktop\\\\Spotify\\\\SampleSpotify\\\\client\\\\src\\\\components\\\\AlbumCard.js\";\nimport React, { Component } from 'react';\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\nimport { apiTok } from './../App.js';\nimport TrackList from './TrackList';\nimport \"../css/albumcard.css\";\nlet albumImg;\n\nclass AlbumCard extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = () => {\n      console.log(apiTok);\n      this.setState({\n        isPaneOpenLeft: true\n      });\n      const id = this.props.data.id;\n      const baseUrl = 'https://api.spotify.com/v1/albums/';\n      const auth_token = 'Bearer ' + apiTok;\n      let fetchUrl = baseUrl + id + '/tracks?limit=24'; // let albumTracks;\n\n      fetch(fetchUrl, {\n        method: \"GET\",\n        headers: {\n          'Content-type': 'application/json',\n          'Authorization': auth_token\n        }\n      }).then(resp => resp.json()).then(data => this.setState({\n        albumTracks: data.items.map(val => val.preview_url ? this.countTracks(val.id, val) : null)\n      }));\n    };\n\n    this.countTracks = (id, data) => {\n      this.state.trackCount += 1;\n      return /*#__PURE__*/React.createElement(TrackList, {\n        key: id,\n        data: data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 14\n        }\n      });\n    };\n\n    this.state = {\n      isPaneOpen: false,\n      isPaneOpenLeft: false,\n      albumTracks: null,\n      trackCount: 0\n    };\n  }\n\n  render() {\n    albumImg = this.props.data.images[1].url;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, this.state.trackCount > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"track-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleClick,\n      src: this.props.data.images[1].url,\n      alt: \"AlbumImg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }, \" \", this.props.data.name)) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SlidingPane, {\n      isOpen: this.state.isPaneOpenLeft,\n      from: \"left\",\n      width: \"400px\",\n      onRequestClose: () => this.setState({\n        isPaneOpenLeft: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"album-tracks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, this.state.albumTracks)));\n  }\n\n}\n\nexport default AlbumCard;\nexport { albumImg };","map":{"version":3,"sources":["C:/Users/Alvin/Desktop/Spotify/SampleSpotify/client/src/components/AlbumCard.js"],"names":["React","Component","SlidingPane","apiTok","TrackList","albumImg","AlbumCard","constructor","handleClick","console","log","setState","isPaneOpenLeft","id","props","data","baseUrl","auth_token","fetchUrl","fetch","method","headers","then","resp","json","albumTracks","items","map","val","preview_url","countTracks","state","trackCount","isPaneOpen","render","images","url","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport SlidingPane from \"react-sliding-pane\";\r\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\r\nimport {apiTok} from './../App.js'\r\nimport TrackList from './TrackList'\r\nimport \"../css/albumcard.css\";\r\n\r\nlet albumImg;\r\nclass AlbumCard extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            isPaneOpen: false,\r\n            isPaneOpenLeft: false,\r\n            albumTracks: null,\r\n            trackCount: 0,\r\n        }\r\n    }\r\n    handleClick = () => {\r\n        console.log(apiTok);\r\n        this.setState({ isPaneOpenLeft: true })\r\n        const id = this.props.data.id\r\n        const baseUrl = 'https://api.spotify.com/v1/albums/'\r\n        const auth_token = 'Bearer ' + apiTok\r\n        let fetchUrl = baseUrl + id + '/tracks?limit=24'\r\n        // let albumTracks;\r\n        fetch(fetchUrl, {\r\n            method: \"GET\",\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': auth_token\r\n            }\r\n        })\r\n        .then(resp => resp.json())\r\n        .then(data => this.setState({albumTracks: data.items.map((val) =>\r\n                      val.preview_url ? (this.countTracks(val.id,val)) : null)}))\r\n    }\r\n    countTracks = (id, data) => {\r\n      this.state.trackCount += 1;\r\n      return <TrackList key={id} data={data} />\r\n    }\r\n\r\n    render(){\r\n        albumImg = this.props.data.images[1].url;\r\n        return(\r\n          <div>\r\n          {\r\n            this.state.trackCount > 0 ?\r\n            (<div className=\"track-card\" >\r\n              <img onClick={this.handleClick} src={this.props.data.images[1].url} alt='AlbumImg'  />\r\n              <p> {this.props.data.name}</p>\r\n            </div>\r\n            ) :\r\n            <div></div>\r\n\r\n          }\r\n\r\n            <SlidingPane isOpen={this.state.isPaneOpenLeft} from=\"left\" width=\"400px\" onRequestClose={() => this.setState({ isPaneOpenLeft: false })}>\r\n              <div id=\"album-tracks\">\r\n                {this.state.albumTracks}\r\n              </div>\r\n            </SlidingPane>\r\n\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AlbumCard;\r\nexport {albumImg};\r\n"]},"metadata":{},"sourceType":"module"}